[request_definition]
# Define a request as a combination of subject, object, and action.
r = sub, obj, act

[policy_definition]
# Define a policy rule with a subject (typically a role), an object (resource), and an action.
p = sub, obj, act

[role_definition]
# Define the grouping policy which establishes the relationship between users and roles.
# For example, a grouping policy might state: g, alice, admin
g = _, _

[policy_effect]
# The policy effect 'allow' is applied if at least one matching policy rule is found.
e = some(where (p.eft == allow))

[matchers]
# The matcher determines if a request should be allowed.
#
# Explanation:
#   - g(r.sub, p.sub): Checks if the user (r.sub) belongs to the role (p.sub) defined in the policy.
#   - (p.obj == "*" || r.obj == p.obj): Allows the policy to grant permission on all objects if p.obj is "*".
#   - (p.act == "*" || r.act == p.act): Similarly, allows the policy to grant all actions if p.act is "*".
#
# For example, a policy line like "p, admin, *, *" would mean that any user with the role "admin" is allowed
# to perform any action on any resource.
m = g(r.sub, p.sub) && (p.obj == "*" || r.obj == p.obj) && (p.act == "*" || r.act == p.act)
